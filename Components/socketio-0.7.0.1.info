{"Name":"Socket.IO Client for Android","Id":2715,"Alias":"socketio","Description":"# Socket.IO Client Details\n\nSocket.IO enables real-time bidirectional event-based communication.\nIt works on every platform, browser or device, focusing equally on reliability and speed.\n\n * **Real-time analytics**  \n   Push data to clients that gets represented as real-time counters, charts or logs.\n * **Instant messaging and chat**  \n   Socket.IO\u0027s \"Hello world\" is a chat app in just a few lines of code.\n * **Binary streaming**  \n   Starting in 1.0, it\u0027s possible to send any blob back and forth: image, audio, video.\n * **Document collaboration**  \n   Allow users to concurrently edit a document and see each other\u0027s changes.\n   \n\u003e **USED BY EVERYONE**  \n\u003e From Microsoft Office, Yammer, Zendesk, Trello... to hackathon winners and little startups.\n\n\u003e **IMMENSELY POWERFUL, YET EASY TO USE**  \n\u003e Our getting started guide will show you how to create lots of amazing applications in fewer \n\u003e than 200 lines of code.\n\n## Connect to Server\n\nConnecting to a Socket.IO server is just two lines:\n\n    // connect to a Socket.IO server\n    socket = IO.Socket(\"http://chat.socket.io/\");\n    socket.Connect();\n    \n    // disconnect from the server\n    socket.Close();\n\n## Subscribe to Events\n\nListening for messages from the server is easy,all we need to do is \nattach a delegate to the event name using the `On` method.\n\nThe `data` received from the server is an array of `Java.Lang.Object` values:\n\n    // whenever the server emits \"login\", print the login message\n    socket.On(\"login\", data =\u003e {\n        connected = true;\n        \n        // get the json data from the server message\n        var json = data[0].ToString();\n        var jobject = JObject.Parse(json);\n        \n        // get the number of users\n        var numUsers = jobject.Value\u003cint\u003e(\"numUsers\");\n        \n        // display the welcome message...\n    });\n    \n    // whenever the server emits \"new message\", update the chat body\n    socket.On(\"new message\", data =\u003e {\n        // get the json data from the server message\n        var json = data[0].ToString();\n        var jobject = JObject.Parse(json);\n        \n        // get the message data values\n        var username = jobject.Value\u003cstring\u003e(\"username\");\n        var message = jobject.Value\u003cstring\u003e(\"message\");\n        \n        // display message...\n    });\n\n## Send a Message\n\nSending a message to the server is just a single line of code that makes use of the \n`Emit` method:\n\n    // we can send messages to the server\n    socket.Emit(\"add user\", \"username\");\n    if (connected) {\n       socket.Emit(\"new message\", \"This is a message from Xamarin.Android...\");\n    }\n    \n    // or we can just send events\n    socket.Emit(\"typing\");\n    // cancel that typing event\n    socket.Emit(\"stop typing\");\n","Version":"0.7.0.1","Summary":"A realtime application framework (client) based on Socket.IO v1.x for Android","QuickStart":"# Getting Started with Socket.IO Client\n\nSocket.IO enables real-time bidirectional event-based communication.\nIt works on every platform, browser or device, focusing equally on reliability and speed.\n\n * **Real-time analytics**  \n   Push data to clients that gets represented as real-time counters, charts or logs.\n * **Instant messaging and chat**  \n   Socket.IO\u0027s \"Hello world\" is a chat app in just a few lines of code.\n * **Binary streaming**  \n   Starting in 1.0, it\u0027s possible to send any blob back and forth: image, audio, video.\n * **Document collaboration**  \n   Allow users to concurrently edit a document and see each other\u0027s changes.\n   \n\u003e **USED BY EVERYONE**  \n\u003e From Microsoft Office, Yammer, Zendesk, Trello... to hackathon winners and little startups.\n\n\u003e **IMMENSELY POWERFUL, YET EASY TO USE**  \n\u003e Our getting started guide will show you how to create lots of amazing applications in fewer \n\u003e than 200 lines of code.\n\n## Connect to Server\n\nConnecting to a Socket.IO server is just two lines:\n\n    // connect to a Socket.IO server\n    socket = IO.Socket(\"http://chat.socket.io/\");\n    socket.Connect();\n    \n    // disconnect from the server\n    socket.Close();\n\n## Subscribe to Events\n\nListening for messages from the server is easy,all we need to do is \nattach a delegate to the event name using the `On` method.\n\nThe `data` received from the server is an array of `Java.Lang.Object` values:\n\n    // whenever the server emits \"login\", print the login message\n    socket.On(\"login\", data =\u003e {\n        connected = true;\n        \n        // get the json data from the server message\n        var json = data[0].ToString();\n        var jobject = JObject.Parse(json);\n        \n        // get the number of users\n        var numUsers = jobject.Value\u003cint\u003e(\"numUsers\");\n        \n        // display the welcome message...\n    });\n    \n    // whenever the server emits \"new message\", update the chat body\n    socket.On(\"new message\", data =\u003e {\n        // get the json data from the server message\n        var json = data[0].ToString();\n        var jobject = JObject.Parse(json);\n        \n        // get the message data values\n        var username = jobject.Value\u003cstring\u003e(\"username\");\n        var message = jobject.Value\u003cstring\u003e(\"message\");\n        \n        // display message...\n    });\n\n## Send a Message\n\nSending a message to the server is just a single line of code that makes use of the \n`Emit` method:\n\n    // we can send messages to the server\n    socket.Emit(\"add user\", \"username\");\n    if (connected) {\n       socket.Emit(\"new message\", \"This is a message from Xamarin.Android...\");\n    }\n    \n    // or we can just send events\n    socket.Emit(\"typing\");\n    // cancel that typing event\n    socket.Emit(\"stop typing\");\n","Hash":"a22bfbdba9f5eb1795ed7204f8d59391","TargetPlatforms":["android"],"TrialHash":null}